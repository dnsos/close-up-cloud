import * as PIXI from 'pixi.js'
import { textStyle } from './styles'

function getRandomInt(max) {
  return Math.floor(Math.random() * Math.floor(max));
}

export function appendCloseups (properties, PIXIApp) {

  // console.log('Appended tag:', properties.title)

  // container for storing sprite, text etc. in
  const tagContainer = new PIXI.Container()
  tagContainer.name = properties.title
  tagContainer.x = Math.random() * 500 // currently mockup coordinates. TODO: generated by force layout
  tagContainer.y = Math.random() * 500

  // create container for each tag origin
  for (const [index, occurrence] of properties.occurrences.entries()) {
    
    // container to hold all occurrences of tag from iterated origin
    const occurrenceContainer = new PIXI.Container()

    const noOfOccurrences = occurrence.geometry.length
    const randomIndex = getRandomInt(noOfOccurrences)

    // retrieve coordinates/dimensions in origin image
    const crop = new PIXI.Rectangle(
      occurrence.geometry[randomIndex].x,
      occurrence.geometry[randomIndex].y,
      occurrence.geometry[randomIndex].width,
      occurrence.geometry[randomIndex].width)
    
    // load origin image from PIXI loader
    const resource = PIXIApp.loader.resources[occurrence.origin]

    console.time("Single Texture creation")
    // create texture from crop of origin image
    const texture = new PIXI.Texture(resource.texture, crop)
    texture.updateUvs() // https://pixijs.download/dev/docs/PIXI.Texture.html#updateUvs
    console.timeEnd("Single Texture creation")
    
    // create sprite from texture
    let sprite = new PIXI.Sprite(texture)
    sprite.x = 0 // TODO: in Tag view these coordinates need to be generated from a force layout
    sprite.y = 0
    sprite.width = properties.tagCount * 20 // currently mockup dimensions TODO: generate from force layout
    sprite.height = properties.tagCount * 20

    sprite.visible = (index != 0) ? false : true // TODO: needs to be automated to display depictions from all origins

    // add interactivity
    sprite.interactive = true
    sprite.buttonMode = true

    // add events
    sprite.on('pointerover', (event) => {
      // console.log('hover event', properties)
    })
    sprite.on('pointertap', (event) => {
      // console.log('switching to Tag view', properties)
    })

    // add sprite to occurrence container
    occurrenceContainer.addChild(sprite)
    tagContainer.addChild(occurrenceContainer)
  }

  // create text for tag title
  const tagTitle = new PIXI.Text(properties.title + ' (' + properties.tagCount + ')', textStyle)
  tagContainer.addChild(tagTitle)
  
  // return container for appending to a parent
  return tagContainer
  
}