import store from '../store'
import * as PIXI from 'pixi.js'
import { mockupSettings, textStyle } from './variables'
import { getRandomInt } from './utils'

export function appendCloseups (properties, PIXIApp) {

  // container for storing sprite, text etc. in
  const tagContainer = new PIXI.Container()
  tagContainer.name = properties.title
  tagContainer.x = Math.random() * 500 // currently mockup coordinates. TODO: generated by force layout
  tagContainer.y = Math.random() * 500

  const occurrencesContainer = new PIXI.Container()
  occurrencesContainer.name = 'occurrencesContainer'

  // create container for each tag origin
  for (const [index, occurrence] of properties.occurrences.entries()) {
    
    // container to hold all occurrences of tag from iterated origin
    const occurrenceContainer = new PIXI.Container()

    const noOfOccurrences = occurrence.geometry.length
    const randomIndex = getRandomInt(noOfOccurrences)

    // retrieve coordinates/dimensions in origin image
    const crop = new PIXI.Rectangle(
      occurrence.geometry[randomIndex].x/2,
      occurrence.geometry[randomIndex].y/2,
      occurrence.geometry[randomIndex].width/2,
      occurrence.geometry[randomIndex].width/2)
    
    // load origin image from PIXI loader
    const resource = PIXIApp.loader.resources[occurrence.origin]

    // create texture from crop of origin image
    const texture = new PIXI.Texture(resource.texture, crop)
    texture.updateUvs() // https://pixijs.download/dev/docs/PIXI.Texture.html#updateUvs
    
    // create sprite from texture
    let sprite = new PIXI.Sprite(texture)
    sprite.x = 0 // TODO: in Tag view these coordinates need to be generated from a force layout
    sprite.y = 0
    sprite.width = Math.sqrt(mockupSettings.dimensionsUnit * properties.tagCount)
    sprite.height = Math.sqrt(mockupSettings.dimensionsUnit * properties.tagCount)

    // add interactivity
    sprite.interactive = true
    sprite.buttonMode = true

    // add events
    sprite.on('pointerover', () => {
      store.commit('setHoveredTag', properties.title)
    })
    sprite.on('pointerout', () => {
      store.commit('setHoveredTag', '')
    })
    sprite.on('pointertap', () => {
      if (store.state.activeView === 'cloud') {
        //console.log('Selected tag:', properties.title)
        store.dispatch('handleSetView', 'tag')
        store.dispatch('handleSetActiveTag', properties.title)
      } else if (store.state.activeView === 'tag') {
        //console.log('Selected object:?', properties)
      }
    })

    // add sprite to occurrence container
    occurrenceContainer.addChild(sprite)
    occurrencesContainer.addChild(occurrenceContainer)
    tagContainer.addChild(occurrencesContainer)
  }

  // create text for tag title
  const tagTitle = new PIXI.Text(properties.title + ' (' + properties.tagCount + ')', textStyle)
  tagTitle.alpha = 0
  tagTitle.name = properties.title
  tagContainer.addChild(tagTitle)
  
  // return container for appending to a parent
  return tagContainer
  
}